// # 1 generic
// type SuperPrint = <T>(arr: T[]) => T

// const superPrint: SuperPrint = (arr) => arr[0]

// const a = superPrint([1, 2, 3, 4])
// const b = superPrint([true, false, true])
// const c = superPrint(["true"," false", "true"]) // string 
// const d = superPrint([1, 2, true, false]) // 원하는 것은 어떤 타입이든 출력되게하는것
// d.toUpperCase()
// 모든 경우에 call signature를 하는 것은 별로 좋은 방법이 아니었다.
// generic은 any와 다르다.
// type을 추론해준다.
// any는 모든게 any니까 별도로 타입 추론할것이 없다.
// 즉, 정적검사를 못한다.


// // # 2 any
// type SuperPrint = (arr: any[]) => any

// const superPrint: SuperPrint = (arr) => arr[0]

// const a = superPrint([1, 2, 3, 4])
// const b = superPrint([true, false, true])
// const c = superPrint(["true"," false", "true"]) // string 
// const d = superPrint([1, 2, true, false]) // 원하는 것은 어떤 타입이든 출력되게하는것
// d.toUpperCase() // any라서 error가 발생하지 않음. 즉, 정적검사를 하지 않는다. 

// # 3 wrong generic
// type SuperPrint = (arr: T[]) => T // 이렇게 쓰면 없는 타입으로 인식된다.
// type SuperPrint = <T>(arr: T[]) => T // 이렇게 쓰면 없는 타입으로 인식된다.

// const superPrint: SuperPrint = (arr) => arr[0]

// const a = superPrint([1, 2, 3, 4])
// const b = superPrint([true, false, true])
// const c = superPrint(["true"," false", "true"]) // string 
// const d = superPrint([1, 2, true, false, "hello"]) // 원하는 것은 어떤 타입이든 출력되게하는것
// d.toUpperCase() 

// # 4 more geneirc type(template)
type SuperPrint = <T, M>(a: T[], b: M) => T

const superPrint: SuperPrint = (arr) => arr[0]

const a = superPrint([1, 2, 3, 4], "x")
const b = superPrint([true, false, true])
const c = superPrint(["true"," false", "true"]) // string 
const d = superPrint([1, 2, true, false, "hello"]) // 원하는 것은 어떤 타입이든 출력되게하는것
d.toUpperCase() 
// 타입스크립트는 제니릭을 처음 인식해씅ㄹ 떄와 제네릭의 순서를 기반으로 제네릭의 타입을 알게된다.